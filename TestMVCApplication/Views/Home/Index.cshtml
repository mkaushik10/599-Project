@model TestMVCApplication.Models.PageViewModel
@{  
    ViewBag.Title = "Location Assessor";  
}
<h3>Location Evaluator</h3>
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script src="~/Scripts/GeoJSON.js"></script>
<script type="text/javascript">
    function initialize() {
        var mapOptions = {
            center: new google.maps.LatLng(34.00, -118.1167),
            zoom: 12,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
        // create a marker         
        var markers = new Array();
        var infowindow = new google.maps.InfoWindow({
            maxWidth: 300
        });
        map.data.setStyle({
            strokeWeight: 3,
            fillColor: 'green'
        });
        google.maps.event.addListener(map, 'click', function (event) {
            currentLat = event.latLng.lat();
            currentLong = event.latLng.lng();
            $.ajax({
                url: "@Url.Action("FetchInformation", "Home")",
                type: "POST",
                dataType: "json",

                data: { lat: currentLat, lng: currentLong },

                success: function (data) {
                    //Start Starbucks Data
                    $.each(data.coffeeOutletsLst, function () {
                        //alert(this.latitude);
                        var marker = new google.maps.Marker({
                            position: new google.maps.LatLng(this.latitude, this.longitude),
                            map: map
                        });

                        var content = '<b>Location:</b> ' + this.location;
                        google.maps.event.addListener(marker, 'click', (function (marker, infowindow) {
                            return function () {
                                infowindow.setContent(content);
                                infowindow.open(map, marker);
                            }
                        })(marker, infowindow));
                    });

                    //End Starbucks Data

                    //Start Census Data
                    $.each(data.caCensusData, function () {
                        var marker = new google.maps.Marker({
                            position: new google.maps.LatLng(currentLat, currentLong),
                            map: map
                        });

                        var content = "<div id='mydiv' style='font-weight:bold'><b>County: </b>" + data.caCensusData.county + "<br/>\
                            <b>Population: </b> " + data.caCensusData.popDensity + "<br/>\
                            <b>Median Household Income:</b> " + data.caCensusData.unemployment + "<br/>\
                            <b>Unemployed Percentage:</b> " + data.caCensusData.medIncome + "<br/>\
                             Crime Rate: " + data.caCensusData.crimeRate + "</div>";
                        google.maps.event.addListener(marker, 'click', (function (marker, infowindow) {
                            return function () {
                                infowindow.setContent(content);
                                infowindow.open(map, marker);
                            }
                        })(marker, infowindow));
                    });
                    //End Census Data

                },
                error: function () {
                    alert('error..!!');
                }
            });
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        });

        //for plpotting the polygon on click of area
        //var googleOptions = {
        //    strokeColor: '#CCC',
        //    strokeWeight: 1
        //};

        //map.data.loadGeoJson();

        $(".area").on('click', function () {
            var areaId = $(this).attr("id")
            $.ajax({
                url: "@Url.Action("FetchAreaInformation", "Home")",
                type: "POST",
                dataType: "json",
                data: { geoid: areaId },
                success: function (data) {
                    geoj = "{ \"type\": \"FeatureCollection\",\
                        \"features\": [\
                        { \"type\": \"Feature\",\
                        \"geometry\": " + data.areaData.geoJSON + " }]}";

                    var geojson = JSON.parse(geoj);
                    map.data.addGeoJson(geojson);
                    //zoom(map);

                    map.data.addListener('click', function (event) {
                        currentLat = event.latLng.lat();
                        currentLong = event.latLng.lng();

                        var marker = new google.maps.Marker({
                            position: new google.maps.LatLng(currentLat, currentLong),
                            map: map
                        });

                        var content = "<div id='mydiv' style='font-weight:bold'><b>County: </b>" + data.areaData.county + "<br/>\
                            <b>Population: </b> " + data.areaData.popDensity + "<br/>\
                            <b>Median Household Income:</b> " + data.areaData.unemployment + "<br/>\
                            <b>Unemployed Percentage:</b> " + data.areaData.medIncome + "<br/>\
                               Crime Rate: " + data.areaData.crimeRate + "\
                            </div>";
                        google.maps.event.addListener(marker, 'click', (function (marker, infowindow) {
                            return function () {
                                infowindow.setContent(content);
                                infowindow.open(map, marker);
                            }
                        })(marker, infowindow));

                        $.ajax({
                            url: "@Url.Action("GetCoffeeOutletsJson", "Home")",
                            type: "POST",
                            dataType: "json",
                            data: { lat: currentLat, lng: currentLong },
                            success: function (data) {
                                //Start Starbucks Data
                                $.each(data.coffeeOutletsLst, function () {
                                    //alert(this.latitude);
                                    var marker = new google.maps.Marker({
                                        position: new google.maps.LatLng(this.latitude, this.longitude),
                                        map: map
                                    });

                                    var content = '<b>Location:</b> ' + this.location;
                                    google.maps.event.addListener(marker, 'click', (function (marker, infowindow) {
                                        return function () {
                                            infowindow.setContent(content);
                                            infowindow.open(map, marker);
                                        }
                                    })(marker, infowindow));
                                });
                            }
                        });

                        map.data.overrideStyle(event.feature, { fillColor: 'red' });
                    });

                },
                error: function () {
                    alert('error');
                }
            });
        });

    }
    google.maps.event.addDomListener(window, 'load', initialize);


</script>

<div id="map_canvas" style="width: 900px; height: 550px; float: left; border: 1px solid darkgrey;">
</div>
@using (Html.BeginForm())
{
    <div class="panel panel-primary">
        @* <div class="panel-heading">
            <h3 class="panel-title">......</h3>
        </div>*@
        <div class="panel-body">
            <div style="width: 400px; float: right; padding-right: 15px">
                <table>
                    <tr>
                        <td>@Html.LabelFor(m => m.selectedCrime)</td>
                        <td>@Html.DropDownListFor(m => m.selectedCrime, Model.CrimeList, new { @class = "dropdown theme-dropdown clearfix" })</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(m => m.selectedPopulation)</td>
                        <td>@Html.DropDownListFor(m => m.selectedPopulation, Model.PopulationList, new { @class = "dropdown theme-dropdown clearfix" })</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(m => m.selectedEmployment)</td>
                        <td>@Html.DropDownListFor(m => m.selectedEmployment, Model.EmploymentList, new { @class = "dropdown theme-dropdown clearfix" })</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(m => m.selectedIncome)</td>
                        <td>@Html.DropDownListFor(m => m.selectedIncome, Model.IncomeList, new { @class = "dropdown theme-dropdown clearfix" })</td>
                    </tr>
                </table>

                <br />
                <button id="btnSuggest" type="submit" class="btn btn-primary">Suggest Locations</button>
                <br />
                <br />

                @if (Model.Areas.Count > 0)
                {
                    foreach (var area in Model.Areas)
                    {
                    <a id=@area.geoid class="area brand"><i>@area.county</i></a>
                    if (area.popChange > 0)
                    {
                        <img src="~/Images/upTrend1.jpg" height="25" width="25" />
                    }
                    else if (area.popChange < 0)
                    {
                        <img src="~/Images/downTrend1.gif" height="25" width="25" />
                    }
                    <br />
                    }
                }
                else
                { 
                    <p>Choose options to see the areas matching your search..</p>
                }
            </div>
        </div>
    </div>
}

